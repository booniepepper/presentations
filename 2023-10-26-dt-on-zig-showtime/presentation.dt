#!/usr/bin/env -S rlwrap dt

# Slides

[ [ "dt"
    "duct tape for your unix pipes"
  ]
  [ "j.r. \"boonie pepper\" hill"
    "proglang enthusiast"
    "carpenter and roofer"
    "amateur woodworker"
    "plucky with instruments"
    "2x girl dad"
  ]
  [ "professionally..."
    "software handyman"
    "2003-2014 gc, roofing, realty, usmc, more"
    "2014-2023 aws"
    "2023 auth0 (contract)"
    "next ???"
  ]
  [ "what's dt?"
    "one-liner language"
    ""
    "TODO: demo prompt"
  ]
  [ "primary inspirations"
    " red green: handyman corner            "
    "  catlangs: forth, factor, joy, min    "
    "text utils: awk, sed, xargs, jq, shells"
    " oneliners: ruby, python, perl, raku   "
    "     other: haskell, tcl, basic, etc   "
  ]
  [ "dt goals"
    "aspirations are to be..."
    "------------------------"
    "a more-general awk"
    "a jq/yq/xq for text"
    "forth/joy/factor for sysadmins"
    "building block for large ecosystems"
  ]
  [ "writing dt"
    "rail (many langs)"
    "rail (rust)"
    "dt (rail/rust)"
    "moved + amazon rto"
    "dt (zig)"
  ]
  [ "writing in zig"
    "TODO: Something about 0.11, packaging, etc"
    "TODO: Something about \"just have a pointer\""
    "TODO: Genuinely pleasant"
    "TODO: C but better?"
    "TODO: Assembly DSL?"
  ]
  [ "is zig better than rust?"
    "what is your goal?"
    "zig is here to stay"
    "don't discount go, lua, odin, etc"
  ]
  [ "what does dt need?"
    "not contributors"
    "doc contributors"
    "users"
    "power users"
    "tutorials"
    "examples"
    "feedback"
  ]
  [ "what's next?"
    "fleshing out"
    "standards?"
    "posix?"
  ]
  [ "special thanks"
    "chuck moore, leo brodie"
    "vesta stoudt, red green"
    "aho, weinberger and kernighan"
  ]
  [ "keep your stick on the ice"
    "kthxbai"
  ]
] \slides:



# Presentation stuff. Assumes classic 80x24 terminal.

[2 /] \halve def

[ \line:
  80 line len - halve \lpad:
  line [" " push] lpad times
  rev "" join
] \centered def

[ \screen:
  # Intentionally slow line-by-line print for effect. (I also do some
  # virtualization to make it slower in my presentation.) In your
  # code, concatenate lines before printing.
  screen deq [title content]:
  \nl 5 times
  title green centered pl
  \nl 2 times
  content norm [centered pl] each
  [nl] 16 screen len - times
] \show-screen def

[ \n:
  slides len \slidelen:
  [ red "ERR: There are only " p slidelen p " slides" pl norm
  ] slidelen n lt? do?
  slides rev [pop drop] n 1 - times
  last
] \nth-slide def

[ \n:
  n nth-slide show-screen
  n
] \print-slide def

[ quote-all drop 1 print-slide ] \restart def
[ \nl 23 times ] \clear def
[ 1 + print-slide ] \next def
[ 1 - print-slide ] \prev def

# let's gooooooooooooo

1 print-slide
repl
