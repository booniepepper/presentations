#!/usr/bin/env -S rlwrap dt

# Slides

[ [ "dt"
    "duct tape for your unix pipes"
    ""
    "https://dt.plumbing"
  ]
  [ "j.r. \"boonie pepper\" hill"
    "proglang enthusiast"
    "highschool dropout"
    "carpenter and roofer"
    "amateur woodworker"
    "plucky with instruments"
    "2x girl dad"
  ]
  [ "professionally..."
    "software handyman"
    "2003-2014 gc, roofing, realty, usmc, more"
    "2014-2023 aws"
    "2023 auth0 (contract)"
    "next ???"
  ]
  [ "what's dt?"
    "one-liner language"
    ""
    "show don't tell"
    "demo time"
  ]
  [ "inspirations"
    "text utils: awk, sed, xargs, jq, shells"
    "  catlangs: forth, factor, joy, min    "
    " oneliners: ruby, python, perl, raku   "
    "     other: haskell, tcl, basic, etc   "
    " red green: handyman corner            "
  ]
  [ "who is it for?"
    "awk lovers: another toy"
    "jq/yq/xq/etc lovers: for plaintext"
    "forth/postscript/factor lovers: for scripting"
    "large ecosystems: a building block"
  ]
  [ "what does dt need?"
    "not contributors"
    "users"
    "power users"
    "feedback"
    "docs"
    "tutorials"
    "examples"
  ]
  [ "what's next?"
    "immediately..."
    "fleshing out"
    "probably 2.0"
    ""
    "long term..."
    "standards?"
    "posix?"
  ]
  [ "writing dt"
    "how do a language...?"
    ""
    "rail (many langs)"
    "rail (rust)"
    "dt (rail/rust)"
    "moved + amazon rto"
    "dt (zig)"
  ]
  [ "so zig is better than rust?"
    "no, what?"
    "what is your goal?"
    "zig is here to stay"
    "but segfaults, double frees, etc"
    "rust? don't discount go, lua, odin, ocaml, etc"
  ]
  [ "i love writing in zig"
    "because i'm learning"
    "it's like c, but fixed"
    "it's like assembly, but high level"
  ]
  [ "more zig experience"
    "packaging is not yet trivial"
    "(0.11, llvm, zig is not 1.0)"
    ""
    "raw pointers are good?"
    ""
    "lsp (and auguste) is early but cool"
    ""
    "helped launch zig track on exercism"
  ]
  [ "special thanks"
    "chuck moore, leo brodie"
    "vesta stoudt, red green"
    "aho, weinberger and kernighan"
    "jon purdy and brent kerby"
    "dave gauer (zig, forth, encouragement)"
  ]
  [ "kthxbai"
    "https://dt.plumbing"
    ""
    "https://dt.plumbing/zigshowtime"
    ""
    "github/discord/itch.io/etc"
    "booniepepper"
    ""
    "justin@so.dang.cool"
  ]
] \slides:



# Presentation stuff. Assumes classic 80x24 terminal.

[2 /] \halve def

[ \line:
  80 line len - halve \lpad:
  line [" " push] lpad times
  rev "" join
] \centered def

[ \screen:
  # Intentionally slow line-by-line print for effect. (I also do some
  # virtualization to make it slower in my presentation.) In your
  # code, concatenate lines before printing.
  screen deq [title content]:
  \nl 5 times
  title green centered pl
  \nl 2 times
  content norm [centered pl] each
  [nl] 16 screen len - times
] \show-screen def

[ \n:
  slides len \slidelen:
  slidelen n lt?
  [ red "ERR: There are only " p slidelen p " slides" pl norm
  ] slidelen n lt? do?
  slides rev [pop drop] n 1 - times
  last
] \nth-slide def

[ \n:
  n nth-slide show-screen
  n
] \print-slide def

[ quote-all drop 1 print-slide ] \restart def
[ \nl 23 times ] \clear def
[ 1 + print-slide ] \next def
[ 1 - print-slide ] \prev def

# let's gooooooooooooo

1 print-slide
repl
